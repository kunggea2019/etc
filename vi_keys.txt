现在IDE的发展并不需要VIM配置各种插件弄成小型IDE

我认为vim现在的用处在于解放鼠标选中，移动光标

我常用的idea IDE的vim插件常用的操作：

di[tag] da[tag] 删除括号里面的内容

dt[tag] dT[tag] 删除到指定的字符

daw 删除一个word，无论光标在word的任何地方都可以

J 合并两行 再也不用del删除右边了，奈何mac还没有del键

:[number] 跳转到某行

33G(Goto) 跳转到33行

33gg(Goto) 跳转到33行

b 跳转到word的首处，可以重复,跳到上个word

w，e 跳转到下个word

^ 跳转到行首非空处

$ 跳转到行尾

ctrl+v block选择，可以垂直选择修改，鼠标做不到的操作

u      悔棋一步         类似pc的ctrl+z
ctrl+r 反悔一步撤销操作  类似pc的ctrl+y

R 替换一堆字符  替换模式

r 替换一个字符

c 替换选中区域

dd 删除复制一行

p 粘贴

y yank复制

yy 复制一行

x 删除一个字符

o 下单开一行输入

O 向上开一行输入



U 悔棋整行的操作

~ 大小写转换

= 格式化代码

% 匹配各种括号对应 

. 重复上个命令

gd 移动到函数定义的地方 解放了鼠标！

// 强力的查找
fx 在当前行中找x字符，找到了就跳转至
; 重复上一个f命令，而不用重复的输入fx
* 查找光标所在处的单词，向下查找
# 查找光标所在处的单词，向上查找

// 插入模式详解
i 从当前光标处进入插入模式
I 进入插入模式，并置光标于行首
a 追加模式，置光标于当前光标之后
A 追加模式，置光标于行末
o 在当前行之下新加一行，并进入插入模式
O 在当前行之上新加一行，并进入插入模式


比如：
di"	删除"包裹中的字符串， "word" 会删除 word
da"	删除"包裹和包裹中的字符串， "word" 会删除 "word"
vi"	选中，"word" 会选中 word
va"	选中，"word" 会选中 "word"
yi" 和 ya"	你猜？


感想：

感叹bill joy的伟大！硬件软件通吃的geek！

vi/vim的伟大我感觉是一键输入不用搭配ctrl或者alt，三种模式设计简直神来之笔。

Emacs当然也很强，但是总是得按着ctrl，不太习惯。

vi的玄学在于专注文字的处理，并非IDE。

敬 bill！

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~vim的精华杀手功能~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
text object   操作符等待模式  操作+motion
di[   da[   vip vis     =G   =gg 这些都是，vim的净化所在。

文本对象好吧，又一个杀手级别的功能，
理解了文本对象以及广义的文本对象，你的编辑速度会得到N倍的提升。
## 狭义的文本对象
I am a V*imer and Emacser, they are both great tool.
# 如果按下 diw，Vimer就会删除
# 如果按下 das，整个句子都会删除
# 好吧，大概理解了iw指的是一个单词，as值得是一个句子，更多的有aw is ab a[ a} i' a" 好多啊。。。


## 广义的文本对象
1. 我们要明白当前光标是一个位置。
2. 我们会使用位置移动命令比如f3.
=> 那么两个位置就形成了一个文本对象：
所以，试试 3dfe d3fe dgg dG这些命令就伟大了！


https://www.zhihu.com/question/20833248/answer/19978665
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

help i，a d的说明
一系列删除命令来说明，删除的范围从小到大。请 注意 对于单个字符和整行的
操作我们用了已有的 Vi 移动命令。
        "dl"    删除字符 (缩写: "x")                     dl 
        "diw"   删除内含单词                             diw 
        "daw"   删除一个单词                             daw 
        "diW"   删除内含字串 (见  WORD )                 diW 
        "daW"   删除一个字串 (见  WORD )                 daW 
        "dgn"   删除后一个前次搜索模式的匹配             dgn 
        "dd"    删除一行                                 dd 
        "dis"   删除内含句子                             dis 
        "das"   删除一个句子                             das 
        "dib"   删除内含 '(' ')' 块                      dib 
        "dab"   删除一个 '(' ')' 块                      dab 
        "dip"   删除内含段落                             dip 
        "dap"   删除一个段落                             dap 
        "diB"   删除内含 '{' '}' 大块                    diB 
        "daB"   删除一个 '{' '}' 大块                    daB 

请 注意 移动命令和文本对象的区别。移动命令作用于这里 (光标当前位置) 到移动后的
位置。而对象的使用则会作用于整个对象，而和光标在对象的何处无关。例如，我们可以
比较 "dw" 和 "daw": "dw" 删除光标位置到后一个单词的起始处，"daw" 删除光标所在
的整个单词和其后或其前的空白。



折叠zf+motion  zd+motion 打开折叠


台湾老哥最好的教程了vim
https://www.bilibili.com/video/av73146963?p=5



回到更老的跳转位置，使用命令"CTRL-O"；与它相对应的，是"CTRL-I"，它跳转到更新的跳转位置
(:help CTRL-O和:help CTRL-I)。这两个命令前面可以加数字来表示倍数。




：help 很强大 但是是英文的
help J  查看 J的用法
help x  查看 x的用法
比如 
6. Text object selection			 object-select text-objects 
						 v_a v_i

// 中文help 厉害了
http://vimcdoc.sourceforge.net/doc/motion.html#motion.txt



text object
文本对象的生成的理解

## 广义的文本对象
1. 我们要明白当前光标是一个位置。
2. 我们会使用位置移动命令比如f3.
=> 那么两个位置之间的字符内容就形成了一个文本对象：



